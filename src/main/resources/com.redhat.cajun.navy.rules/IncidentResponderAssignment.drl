package com.redhat.cajun.navy.rules;

import java.util.List;

import com.redhat.cajun.navy.rules.DistanceHelper;

import com.redhat.cajun.navy.rules.model.CommanderOverride;
import com.redhat.cajun.navy.rules.model.Incident;
import com.redhat.cajun.navy.rules.model.Mission;
import com.redhat.cajun.navy.rules.model.MissionAssignment;
import com.redhat.cajun.navy.rules.model.PotentialMissionAssignments;
import com.redhat.cajun.navy.rules.model.Responder;
import com.redhat.cajun.navy.rules.model.Status;

rule "Create the Mission Assignments"
    salience 100
    when
        $incident : Incident()
        $responder : Responder()
        not MissionAssignment( responder == $responder, incident == $incident )
    then
    	if ( $incident.getLatitude() == null || $incident.getLongitude() == null || 
    	     $responder.getLatitude() == null || $responder.getLongitude() == null ) {
        	insert( new MissionAssignment( $incident, $responder ) );
        }
        else {
        	double distance = DistanceHelper.calculateDistance( $incident.getLatitude(),
        	                                                    $responder.getLatitude(),
        	                                                    $incident.getLongitude(),
        	                                                    $responder.getLongitude());
        	insert( new MissionAssignment( $incident, $responder, distance ) );
        }
end

rule "The Responder can provide medical assistance"
    when
        $incident : Incident( medicalNeeded == true )
        $responder : Responder( hasMedical == true )
        $mission : MissionAssignment( incident == $incident, responder == $responder )
    then
        int currentScore = $mission.getCompatibilityScore();
        $mission.setCompatibilityScore( currentScore + 50 );
        
end

rule "The Responder can fit the number of people on their boat"
    when
        $incident : Incident( $numberOfPeople : numPeople )
        $responder : Responder( boatCapacity >= $numberOfPeople, $boatCapacity : boatCapacity )
        $mission : MissionAssignment( incident == $incident, responder == $responder )
    then

        int currentScore = $mission.getCompatibilityScore();
		$mission.setCompatibilityScore( currentScore + 100 );
      
end

rule "The Responder can fit the EXACT number of people on their boat"
    when
        $incident : Incident( $numberOfPeople : numPeople )
        $responder : Responder( boatCapacity == $numberOfPeople )
        $mission : MissionAssignment( incident == $incident, responder == $responder )
    then
        int currentScore = $mission.getCompatibilityScore();
		$mission.setCompatibilityScore( currentScore + 50 );

end

rule "Responder is 0 to 5km away from Incident"
	when
		$missionAssignment : MissionAssignment ( distance <= 5000 )
	then
		int currentScore = $missionAssignment.getCompatibilityScore();
		$missionAssignment.setCompatibilityScore( currentScore + 100 );
end

rule "Responder is 5km to 10km away from Incident"
	when
		$missionAssignment : MissionAssignment ( distance > 5000 && distance <= 10000 )
	then
		int currentScore = $missionAssignment.getCompatibilityScore();
		$missionAssignment.setCompatibilityScore( currentScore + 75 );
end

rule "Responder is 10km to 15km away from Incident"
	when
		$missionAssignment : MissionAssignment ( distance > 10000 && distance <= 15000 )
	then
		int currentScore = $missionAssignment.getCompatibilityScore();
		$missionAssignment.setCompatibilityScore( currentScore + 50 );
end

rule "Responder is more than 15km away from Incident"
	when
		$missionAssignment : MissionAssignment ( distance > 15000 )
	then
		int currentScore = $missionAssignment.getCompatibilityScore();
		$missionAssignment.setCompatibilityScore( currentScore + 25 );
end

rule "Collect the Mission Assignments for Processing"
	salience -100
	when
		not PotentialMissionAssignments()
		$allAssignments : List() from collect( MissionAssignment() )
	then
		insert( new PotentialMissionAssignments( $allAssignments ) );
end

rule "Default Prioritization when no Command Override"
	salience -100
	when
		not CommanderOverride()
		$assignments : PotentialMissionAssignments( prioritized == false )
	then
		modify( $assignments ){
			defaultPrioritization()
		}
end

rule "Assign the top mission"
	when
		not Mission()
		$assignments : PotentialMissionAssignments( prioritized == true )
	then
		insert( $assignments.getAssignedMission() );
end