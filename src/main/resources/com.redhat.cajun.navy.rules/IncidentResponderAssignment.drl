package com.redhat.cajun.navy.rules;

import java.util.List;

import com.redhat.cajun.navy.rules.DistanceHelper;

import com.redhat.cajun.navy.rules.model.CommanderOverride;
import com.redhat.cajun.navy.rules.model.Incident;
import com.redhat.cajun.navy.rules.model.Mission;
import com.redhat.cajun.navy.rules.model.MissionAssignment;
import com.redhat.cajun.navy.rules.model.PotentialMissionAssignments;
import com.redhat.cajun.navy.rules.model.Responder;
import com.redhat.cajun.navy.rules.model.Status;
import java.util.Arrays;
import java.util.Collections;
import java.math.BigDecimal;

//TODO - @michael - using no loop on every rule is indicative of poorly though out rule design we should look into this

declare Destination
    name : String 
    distance : double
    destinationLat: BigDecimal
    destinationLong: BigDecimal
end

rule "Create the Mission Assignments"
    salience 100
    when
        $incident : Incident()
        $responder : Responder()
        not MissionAssignment( responder == $responder, incident == $incident )
    then
    	if ( $incident.getLatitude() == null || $incident.getLongitude() == null || 
    	     $responder.getLatitude() == null || $responder.getLongitude() == null ) {
        	insert( new MissionAssignment( $incident, $responder ) );
        }
        else {
        	double distance = DistanceHelper.calculateDistance( $incident.getLatitude(),
        	                                                    $responder.getLatitude(),
        	                                                    $incident.getLongitude(),
        	                                                    $responder.getLongitude());
        	insert( new MissionAssignment( $incident, $responder, distance ) );
        }
end

rule "Responder Drop Off Locations"
    when
        $ma : Mission( destinationLat == null, destinationLong == null )
    then
        	//Port City Marina
			//34.2461° N, 77.9519° W
        	double portCityDistance = DistanceHelper.calculateDistance( new BigDecimal(34.2461),
        	                                                    $ma.getIncidentLat(),
        	                                                     new BigDecimal(77.9519),
        	                                                    $ma.getIncidentLong());
        	insert (new Destination("portCity", portCityDistance, new BigDecimal(34.2461), new BigDecimal(77.9519)));
        	//Wilmington Marine Center
			//34.1706° N, 77.9490° W 
        	double wilmingtonDistance = DistanceHelper.calculateDistance( new BigDecimal(34.1706),
        	                                                    $ma.getIncidentLat(),
        	                                                     new BigDecimal(77.9490),
        	                                                    $ma.getIncidentLong());                                                  
        	insert (new Destination("wilmington", wilmingtonDistance, new BigDecimal(34.1706), new BigDecimal(77.9490)));
        	//Carolina Beach Yacht Club & Marina / Joyner Marina
			//34.0583° N, 77.8885° W
        	double carolinaDistance = DistanceHelper.calculateDistance( new BigDecimal(34.0583),
        	                                                    $ma.getIncidentLat(),
        	                                                     new BigDecimal(77.8885),
        	                                                    $ma.getIncidentLong());                                                  
        	insert (new Destination("carolina", carolinaDistance, new BigDecimal(34.0583), new BigDecimal(77.8885)));
end

rule "Set Responder Destination"
when
	$ma : Mission(destinationLat == null, destinationLong == null)
	$destination : Destination($distance : distance)
	not Destination($distance > distance, this != $destination)
then
	$ma.setDestinationLat($destination.getDestinationLat());
	$ma.setDestinationLong($destination.getDestinationLong());
	modify($ma){}
end

rule "The Responder can provide medical assitance"
    when
        $incident : Incident( medicalNeeded == true )
        $responder : Responder( hasMedical == true )
        $mission : MissionAssignment( incident == $incident, responder == $responder )
    then
    	System.out.println( "The Responder can provide medical assitance" );
        int currentScore = $mission.getCompatibilityScore();
        $mission.setCompatibilityScore( currentScore + 50 );
        
end

rule "The Responder can fit the number of people on their boat"
    when
        $incident : Incident( $numberOfPeople : numPeople )
        $responder : Responder( boatCapacity >= $numberOfPeople, $boatCapacity : boatCapacity )
        $mission : MissionAssignment( incident == $incident, responder == $responder )
    then
    	System.out.println( "The Responder can fit the number of people on their boat " + $boatCapacity + " " + $numberOfPeople );
        int currentScore = $mission.getCompatibilityScore();
		$mission.setCompatibilityScore( currentScore + 100 );
end

rule "The Responder can fit the EXACT number of people on their boat"
    when
        $incident : Incident( $numberOfPeople : numPeople )
        $responder : Responder( boatCapacity == $numberOfPeople )
        $mission : MissionAssignment( incident == $incident, responder == $responder )
    then
    	System.out.println( "The Responder can fit the EXACT number of people on their boat " + $incident );
        int currentScore = $mission.getCompatibilityScore();
		$mission.setCompatibilityScore( currentScore + 50 );

end

rule "Responder is 0 to 5km away from Incident"
	when
		$missionAssignment : MissionAssignment ( distance <= 5000 )
	then
		int currentScore = $missionAssignment.getCompatibilityScore();
		$missionAssignment.setCompatibilityScore( currentScore + 100 );
end

rule "Responder is 5km to 10km away from Incident"
	when
		$missionAssignment : MissionAssignment ( distance > 5000 && distance <= 10000 )
	then
		int currentScore = $missionAssignment.getCompatibilityScore();
		$missionAssignment.setCompatibilityScore( currentScore + 75 );
end

rule "Responder is 10km to 15km away from Incident"
	when
		$missionAssignment : MissionAssignment ( distance > 10000 && distance <= 15000 )
	then
		int currentScore = $missionAssignment.getCompatibilityScore();
		$missionAssignment.setCompatibilityScore( currentScore + 50 );
end

rule "Responder is more than 15 away from Incident"
	when
		$missionAssignment : MissionAssignment ( distance > 15000 )
	then
		int currentScore = $missionAssignment.getCompatibilityScore();
		$missionAssignment.setCompatibilityScore( currentScore + 25 );
end

rule "Collect the Mission Assignments for Processing"
	salience -100
	when
		not PotentialMissionAssignments()
		$allAssignments : List() from collect( MissionAssignment() )
	then
		insert( new PotentialMissionAssignments( $allAssignments ) );
end

rule "Default Prioritization when no Command Override"
	salience -100
	when
		not CommanderOverride()
		$assignments : PotentialMissionAssignments( prioritized == false )
	then
		System.err.println( "Default prioritization algorithm, rules with a CommanderOverride would change this behavior" );
		modify( $assignments ){
			defaultPrioritization()
		}
end

rule "Assign the top mission"
	when
		not Mission()
		$assignments : PotentialMissionAssignments( prioritized == true )
	then
		insert( $assignments.getAssignedMission() );
		System.out.println("mission status= " + $assignments.getAssignedMission().getStatus());
		//modify($assignments){
		//	getAssignedMission()
		//}
end

rule "debug"
	salience -1000
	enabled false
	when
		$ma : MissionAssignment()
	then
		System.out.println("Mission Assignment: Incident.id = " + $ma.getIncident().getId() + ", Responder.id = " + 
		                   $ma.getResponder().getId() + ", distance = " + $ma.getDistance() + ", score = " + $ma.getCompatibilityScore());
		//System.out.println($ma.toString());
end