package com.redhat.cajun.navy.rules;

import java.util.List;

import com.redhat.cajun.navy.rules.DistanceHelper;

import com.redhat.cajun.navy.rules.model.Incident;
import com.redhat.cajun.navy.rules.model.Mission;
import com.redhat.cajun.navy.rules.model.MissionAssignment;
import com.redhat.cajun.navy.rules.model.PotentialMissionAssignments;
import com.redhat.cajun.navy.rules.model.Responders;
import com.redhat.cajun.navy.rules.model.Responder;
import com.redhat.cajun.navy.rules.model.Destinations;
import com.redhat.cajun.navy.rules.model.Destination;
import com.redhat.cajun.navy.rules.model.Status;
import com.redhat.cajun.navy.rules.model.IncidentPriority;
import java.math.BigDecimal;

declare AssignmentPredicate
    incident: String
end

declare BoatCapacityPredicate
    incident: String
    responder: String
end

rule "Add responders"
	salience 200
	when
		$responders : Responders()
	then
		for (Responder r : $responders.getResponders()) {
			insert(r);
		}
end

rule "Add destinations"
    salience 200
    when
        $destinations : Destinations()
    then
        for (Destination d: $destinations.getDestinations()) {
            insert(d);
        }
        retract( $destinations );
end

rule "Create a AssignmentPredicate when there is no IncidentPriority for the Incident"
    when
        $incident : Incident()
        not IncidentPriority ( incidentId == $incident.id )
    then
        AssignmentPredicate predicate = new AssignmentPredicate();
        predicate.setIncident($incident.getId());
        insert( predicate );
end

rule "Create a AssignmentPredicate when there is a IncidentPriority for the Incident with higher than average priority"
    when
        $incident : Incident()
        IncidentPriority ( incidentId == $incident.id, priority.compareTo(averagePriority) >= 0 )
    then
        AssignmentPredicate predicate = new AssignmentPredicate();
        predicate.setIncident($incident.getId());
        insert( predicate );
end

rule "Create a AssignmentPredicate when there is a IncidentPriority for the Incident with lower than average priority and sufficient responders"
    when
        $incident : Incident()
        $responders: Responders()
        IncidentPriority ( incidentId == $incident.id, priority > 0, priority.compareTo(averagePriority) < 0, incidents.compareTo(new BigDecimal(($responders.getResponders().size)/1.5)) < 0 )
    then
        AssignmentPredicate predicate = new AssignmentPredicate();
        predicate.setIncident($incident.getId());
        insert( predicate );
end

rule "Create a AssignmentPredicate when there is a IncidentPriority for the Incident with lower than average priority but high priority"
    when
        $incident : Incident()
        $responders: Responders()
        IncidentPriority ( incidentId == $incident.id, priority > 5 && <= 10, priority.compareTo(averagePriority / 2) > 0)
    then
        AssignmentPredicate predicate = new AssignmentPredicate();
        predicate.setIncident($incident.getId());
        insert( predicate );
end

rule "Create a AssignmentPredicate when there is a IncidentPriority for the Incident with lower than average priority but very high priority"
    when
        $incident : Incident()
        $responders: Responders()
        IncidentPriority ( incidentId == $incident.id, priority > 10, priority.compareTo(averagePriority) < 0)
    then
        AssignmentPredicate predicate = new AssignmentPredicate();
        predicate.setIncident($incident.getId());
        insert( predicate );
end

rule "Create a BoatCapacityPredicate when there is a Responder with boat capacity equal or greater than the incident number of people"
    when
        $incident : Incident()
        $responder : Responder ( boatCapacity >= $incident.numPeople )
    then
        BoatCapacityPredicate predicate = new BoatCapacityPredicate();
        predicate.setIncident($incident.getId());
        predicate.setResponder($responder.getId());
        insert( predicate );
end

rule "Create the Mission Assignments when there is a Assignment Predicate for the incident and a BoatCapacityPredicate for the Responder"
    when
        $incident : Incident()
        $responder : Responder()
        exists AssignmentPredicate( incident == $incident.id)
        BoatCapacityPredicate( incident == $incident.id, responder == $responder.id)
        not MissionAssignment( responder == $responder, incident == $incident )
    then
    	if ( $incident.getLatitude() == null || $incident.getLongitude() == null || 
    	     $responder.getLatitude() == null || $responder.getLongitude() == null ) {
        	insert( new MissionAssignment( $incident, $responder ) );
        }
        else {
        	double distance = DistanceHelper.calculateDistance( $incident.getLatitude(),
        	                                                    $responder.getLatitude(),
        	                                                    $incident.getLongitude(),
        	                                                    $responder.getLongitude());
        	insert( new MissionAssignment( $incident, $responder, distance ) );
        }
end

rule "Responder Drop Off Locations"
    when
        $mission : Mission( destinationLat == null, destinationLong == null, status == Status.ASSIGNED )
        $destination : Destination( distance == null )
    then
       	double distance = DistanceHelper.calculateDistance( $destination.getLatitude(),
            $mission.getIncidentLat(), $destination.getLongitude(), $mission.getIncidentLong());
        modify($destination){
            setDistance(distance)
        }
end

rule "Set Responder Destination"
    when
	    $mission : Mission( destinationLat == null, destinationLong == null, status == Status.ASSIGNED )
	    $destination : Destination($distance : distance)
	    not Destination($distance > distance, this != $destination)
    then
	    $mission.setDestinationLat($destination.getLatitude());
	    $mission.setDestinationLong($destination.getLongitude());
	    modify($mission){}
end

rule "The Responder can provide medical assistance"
    when
        $incident : Incident( medicalNeeded == true )
        $responder : Responder( hasMedical == true )
        $mission : MissionAssignment( incident == $incident, responder == $responder )
    then
        int currentScore = $mission.getCompatibilityScore();
        $mission.setCompatibilityScore( currentScore + 100 );
        
end

rule "The difference between the boat capacity and the incident number of people is less than or equal to 4"
    when
        $incident : Incident( $numberOfPeople : numPeople )
        $responder : Responder( boatCapacity >= $numberOfPeople && boatCapacity <= $numberOfPeople + 4 )
        $mission : MissionAssignment( incident == $incident, responder == $responder )
    then
        int currentScore = $mission.getCompatibilityScore();
		$mission.setCompatibilityScore( currentScore + 25 );
end

rule "The difference between the boat capacity and the incident number of people is less than or equal to 2"
    when
        $incident : Incident( $numberOfPeople : numPeople )
        $responder : Responder( boatCapacity >= $numberOfPeople && boatCapacity <= $numberOfPeople + 2 )
        $mission : MissionAssignment( incident == $incident, responder == $responder )
    then
        int currentScore = $mission.getCompatibilityScore();
		$mission.setCompatibilityScore( currentScore + 25 );
end

rule "The Responder can fit the EXACT number of people on their boat"
    when
        $incident : Incident( $numberOfPeople : numPeople )
        $responder : Responder( boatCapacity == $numberOfPeople )
        $mission : MissionAssignment( incident == $incident, responder == $responder )
    then
        int currentScore = $mission.getCompatibilityScore();
		$mission.setCompatibilityScore( currentScore + 50 );
end

rule "Responder is 0 to 5km away from Incident"
	when
		$missionAssignment : MissionAssignment ( distance <= 5000 )
	then
		int currentScore = $missionAssignment.getCompatibilityScore();
		$missionAssignment.setCompatibilityScore( currentScore + 100 );
end

rule "Responder is 5km to 10km away from Incident"
	when
		$missionAssignment : MissionAssignment ( distance > 5000 && distance <= 10000 )
	then
		int currentScore = $missionAssignment.getCompatibilityScore();
		$missionAssignment.setCompatibilityScore( currentScore + 75 );
end

rule "Responder is 10km to 15km away from Incident"
	when
		$missionAssignment : MissionAssignment ( distance > 10000 && distance <= 15000 )
	then
		int currentScore = $missionAssignment.getCompatibilityScore();
		$missionAssignment.setCompatibilityScore( currentScore + 50 );
end

rule "Responder is more than 15km away from Incident"
	when
		$missionAssignment : MissionAssignment ( distance > 15000 )
	then
		int currentScore = $missionAssignment.getCompatibilityScore();
		$missionAssignment.setCompatibilityScore( currentScore + 25 );
end

rule "Collect the Mission Assignments for Processing"
	salience -100
	when
		not PotentialMissionAssignments()
		$allAssignments : List() from collect( MissionAssignment() )
	then
		insert( new PotentialMissionAssignments( $allAssignments ) );
end

rule "Default Prioritization when no Command Override"
	salience -100
	when
		$assignments : PotentialMissionAssignments( prioritized == false )
	then
		modify( $assignments ){
			defaultPrioritization()
		}
end

rule "Assign the top mission"
	when
		$mission: Mission(status == Status.REQUESTED)
		$assignments : PotentialMissionAssignments( prioritized == true )
	then
		$assignments.getAssignedMission($mission);
		update ($mission)
end